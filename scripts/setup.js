#!/usr/bin/env node

import { existsSync, writeFileSync, readFileSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';
import chalk from 'chalk';
import inquirer from 'inquirer';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

console.log(chalk.blue('═══════════════════════════════════════════════'));
console.log(chalk.blue.bold('    AIA Admin Scripts - Setup Wizard'));
console.log(chalk.blue('═══════════════════════════════════════════════'));
console.log();

async function setup() {
  // Check if .env already exists
  const envPath = join(__dirname, '.env');
  const envExamplePath = join(__dirname, '.env.example');
  
  if (existsSync(envPath)) {
    const { overwrite } = await inquirer.prompt([
      {
        type: 'confirm',
        name: 'overwrite',
        message: '.env file already exists. Do you want to reconfigure it?',
        default: false
      }
    ]);
    
    if (!overwrite) {
      console.log(chalk.gray('Setup cancelled.'));
      return;
    }
  }
  
  console.log(chalk.cyan('Please provide the following configuration:'));
  console.log();
  
  // Collect configuration
  const config = await inquirer.prompt([
    {
      type: 'input',
      name: 'serviceAccountPath',
      message: 'Path to Firebase service account JSON file:',
      default: './serviceAccountKey.json',
      validate: (input) => {
        const fullPath = join(__dirname, input);
        if (!existsSync(fullPath)) {
          return `File not found: ${input}. Please download it from Firebase Console first.`;
        }
        return true;
      }
    },
    {
      type: 'input',
      name: 'projectId',
      message: 'Firebase project ID:',
      validate: input => input.trim() !== '' || 'Project ID is required'
    },
    {
      type: 'input',
      name: 'adminEmail',
      message: 'Admin email (for audit logs):',
      default: 'admin@example.com',
      validate: input => input.includes('@') || 'Please enter a valid email'
    }
  ]);
  
  // Create .env file
  const envContent = `# Firebase Admin SDK Configuration
# Generated by setup wizard on ${new Date().toISOString()}

# Path to your service account JSON file
GOOGLE_APPLICATION_CREDENTIALS=${config.serviceAccountPath}

# Firebase project ID
FIREBASE_PROJECT_ID=${config.projectId}

# Admin user email (for logging who processed requests)
ADMIN_EMAIL=${config.adminEmail}
`;
  
  writeFileSync(envPath, envContent);
  console.log(chalk.green('\n✓ Configuration saved to .env file'));
  
  // Verify Firebase configuration
  console.log(chalk.cyan('\nVerifying Firebase configuration...'));
  
  try {
    const serviceAccountPath = join(__dirname, config.serviceAccountPath);
    const serviceAccount = JSON.parse(readFileSync(serviceAccountPath, 'utf8'));
    
    if (serviceAccount.project_id !== config.projectId) {
      console.log(chalk.yellow(`Warning: Project ID in service account (${serviceAccount.project_id}) doesn't match provided project ID (${config.projectId})`));
    } else {
      console.log(chalk.green('✓ Service account configuration verified'));
    }
  } catch (error) {
    console.log(chalk.red('Failed to verify service account file:'), error.message);
  }
  
  // Install dependencies if needed
  if (!existsSync(join(__dirname, 'node_modules'))) {
    console.log(chalk.cyan('\nInstalling dependencies...'));
    const { execSync } = await import('child_process');
    
    try {
      execSync('npm install', { stdio: 'inherit', cwd: __dirname });
      console.log(chalk.green('✓ Dependencies installed'));
    } catch (error) {
      console.log(chalk.red('Failed to install dependencies. Please run "npm install" manually.'));
    }
  }
  
  console.log(chalk.green('\n✨ Setup complete!'));
  console.log(chalk.white('\nYou can now run the admin scripts:'));
  console.log(chalk.gray('  npm run manage-upgrades'));
  console.log();
  console.log(chalk.yellow('Important reminders:'));
  console.log(chalk.gray('  - Keep your service account key secure'));
  console.log(chalk.gray('  - Never commit the .env file or service account key to version control'));
  console.log(chalk.gray('  - Restrict access to these admin scripts'));
}

// Run setup
setup().catch(error => {
  console.error(chalk.red('Setup failed:'), error);
  process.exit(1);
});